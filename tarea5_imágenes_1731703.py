# -*- coding: utf-8 -*-
"""Tarea5_Imágenes_1731703.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hTsZvPZBakMiBQCWtzk-pT4RigTCrLTC

#Procesamiento y Clasificación de Datos
##Tarea 5 
###Gloria Samanta Servín García 1731703
###26 Junio 2022

##Operaciones basicas con Pillow

Buscando cumplir con los requerimientos de esta tarea, se pretende manipular imágenes de mis cantantes favoritas junto con la de una pintura que acompaña la teatralidad y dramatismo con el que escucho a dichas artistas. Dichas imágenes comparten el mismo formato pero se diferencian en tamaños, estilo e iluminación.

En primera instancia se trabajaran las modificaciones cubiertas en el ejemplo de clase.
"""

from PIL import Image
import matplotlib as plt
filename = "fka.jpg"
with Image.open(filename) as img:
    img.load()

type(img)

isinstance(img, Image.Image)

#img.show()
img

print(img.format)
print(img.size)
print(img.mode)

cropped_img = img.crop((300, 150, 700, 1000))
cropped_img.size
#cropped_img.show()
cropped_img

"""Siguiendo el ejemplo, notamos que con las condiciones previas no se logra tomar ni medio rostro de la cantante FKA Twigs, por lo que cambiamos las dimensiones para poder proceder con el cambio de resolución"""

cropped_img = img.crop((100, 150, 1450, 1850))
cropped_img.size
#cropped_img.show()
cropped_img

low_res_img = cropped_img.resize((cropped_img.width // 4, cropped_img.height // 4))
#low_res_img.show()
low_res_img

"""Antes de proceder con este proceso para el resto de las imágenes, probaremos el resto de las aplicaciones vistas en clase para decidir cuáles pueden servir para la imagen final"""

from google.colab import drive
drive.mount('/content/drive')
cropped_img.save('/content/drive/MyDrive/MCD/Procesamiento/crooped_img.jpg')
low_res_img.save('/content/drive/MyDrive/MCD/Procesamiento/low_res_crop.jpg')

"""##Manipulación basica de imagenes"""

converted_img = img.transpose(Image.FLIP_TOP_BOTTOM)
#converted_img.show()
converted_img

rotated_img = img.rotate(75)
rotated_img

rotated_img = img.rotate(75, expand=True)
rotated_img

"""##Diferentes modos de imagen"""

from google.colab import drive
drive.mount('/content/drive')
filename = "/content/drive/MyDrive/MCD/Procesamiento/ldr.jpg"
with Image.open(filename) as img:
    img.load()


cmyk_img = img.convert("CMYK")
gray_img = img.convert("L")  # Grayscale

#cmyk_img
gray_img

print(img.format)
print(img.size)
print(img.mode)

print(img.getbands())
print(cmyk_img.getbands())
print(gray_img.getbands())

red, green, blue = img.split()
red

red.mode

zeroed_band = red.point(lambda _: 0)

red_merge = Image.merge("RGB", (red, zeroed_band, zeroed_band))
green_merge = Image.merge("RGB", (zeroed_band, green, zeroed_band))
blue_merge = Image.merge( "RGB", (zeroed_band, zeroed_band, blue))

red_merge

green_merge

blue_merge

"""##Blurring, sharpening, smoothing"""

from PIL import Image, ImageFilter
filename = "/content/drive/MyDrive/MCD/Procesamiento/mitski.jpg"
with Image.open(filename) as img:
    img.load()

blur_img = img.filter(ImageFilter.BLUR)
blur_img

img.crop((300, 300, 500, 500))

blur_img.crop((300, 300, 500, 500))

img.filter(ImageFilter.BoxBlur(5))

img.filter(ImageFilter.BoxBlur(20))

print(img.format)
print(img.size)
print(img.mode)

sharp_img = img.filter(ImageFilter.SHARPEN)
img.crop((175, 100, 260, 400))

sharp_img.crop((175, 100, 260, 400))

smooth_img = img.filter(ImageFilter.SMOOTH)
img.crop((175, 100, 260, 400))

smooth_img.crop((175, 100, 260, 400))

"""##Deteccion de bordes, mejora de bordes y embossing"""

from PIL import Image, ImageFilter
filename = "/content/drive/MyDrive/MCD/Procesamiento/bg.jpg"
with Image.open(filename) as img:
    img.load()

img_gray = img.convert("L")
edges = img_gray.filter(ImageFilter.FIND_EDGES)
edges

img_gray_smooth = img_gray.filter(ImageFilter.SMOOTH)
edges_smooth = img_gray_smooth.filter(ImageFilter.FIND_EDGES)
edges_smooth

edge_enhance = img_gray_smooth.filter(ImageFilter.EDGE_ENHANCE)
edge_enhance

emboss = img_gray_smooth.filter(ImageFilter.EMBOSS)
emboss

"""##Segmentación de imagenes y superposición"""

from PIL import Image
filename_fka = "/content/drive/MyDrive/MCD/Procesamiento/FKA.jpg"

with Image.open(filename_fka) as img_fka:
    img_fka.load()
img_fka = img_fka.crop((100, 150, 1450, 1850))
img_fka

img_fka_gray = img_fka.convert("L")
img_fka_gray

threshold = 100
img_fka_threshold = img_fka_gray.point(
    lambda x: 255 if x > threshold else 0
)
img_fka_threshold

red, green, blue = img_fka.split()
green

red

blue

"""Como en el ejemplo, para esta imagen el canal azul tiene un mayor contraste entre los píxeles que representan a FKA Twigs y los que representan el fondo por lo que se usa la imagen del canal azul para establecer el umbral"""

threshold = 57
img_fka_threshold = blue.point(lambda x: 255 if x > threshold else 0)
img_fka_threshold = img_fka_threshold.convert("1")
img_fka_threshold

filename_ldr = "/content/drive/MyDrive/MCD/Procesamiento/ldr.jpg"

with Image.open(filename_ldr) as img_ldr:
    img_ldr.load()
img_ldr = img_ldr.crop((100, 75, 400, 700))
img_ldr

img_ldr_gray = img_ldr.convert("L")
img_ldr_gray

threshold = 100
img_ldr_threshold = img_ldr_gray.point(
    lambda x: 255 if x > threshold else 0
)
img_ldr_threshold

red, green, blue = img_ldr.split()
green

red

blue



"""## Erosión y dilatación"""

from PIL import ImageFilter
filename = "/content/drive/MyDrive/MCD/Procesamiento/ldr.jpg"

with Image.open(filename) as img:
    img.load()
for _ in range(3):
    img = img.filter(ImageFilter.MinFilter(3))
img

with Image.open(filename) as img:
    img.load()
for _ in range(3):
    img = img.filter(ImageFilter.MaxFilter(3))
img

with Image.open(filename) as img:
    img.load()

for _ in range(10):
    img = img.filter(ImageFilter.MinFilter(3))

img

"""Usando la erosión y la dilatación juntas para rellenar huecos y eliminar objetos pequeños en este retrato que tiene varios detalles terminamos con una imagen un poco perturbadora."""

for _ in range(10):
    img = img.filter(ImageFilter.MaxFilter(3))
img

"""##Segmentación de imagen con Tresholding"""

def erode(cycles, image):
    for _ in range(cycles):
         image = image.filter(ImageFilter.MinFilter(3))
    return image


def dilate(cycles, image):
    for _ in range(cycles):
         image = image.filter(ImageFilter.MaxFilter(3))
    return image
    
step_1 = erode(5, img_fka_threshold)
step_1

step_2 = dilate(50, step_1)
step_2

fka_mask = erode(10, step_2)
fka_mask

fka_mask = fka_mask.convert("L")
fka_mask = fka_mask.filter(ImageFilter.BoxBlur(20))
fka_mask

blank = img_fka.point(lambda _: 0)
fka_segmented = Image.composite(img_fka, blank, fka_mask)
fka_segmented

def erode(cycles, image):
    for _ in range(cycles):
         image = image.filter(ImageFilter.MinFilter(3))
    return image


def dilate(cycles, image):
    for _ in range(cycles):
         image = image.filter(ImageFilter.MaxFilter(3))
    return image
    
step_1 = erode(5, img_ldr_threshold)
step_1

step_2 = dilate(10, step_1)
step_2

ldr_mask = erode(10, step_2)
ldr_mask

ldr_mask = ldr_mask.convert("L")
ldr_mask = ldr_mask.filter(ImageFilter.BoxBlur(20))
ldr_mask

blank = img_ldr.point(lambda _: 0)
ldr_segmented = Image.composite(img_ldr, blank, ldr_mask)
ldr_segmented

"""Por las diferentes sombras que se tienen en este retraro editorial este acercamiento no nos sirve para delimitar el contorno de la artista"""

from PIL import Image
import matplotlib as plt
filename = "ldr.jpg"
with Image.open(filename) as img:
    img.load()

type(img)

isinstance(img, Image.Image)

"""## Superposición de imagenes"""

filename = "/content/drive/MyDrive/MCD/Procesamiento/bg.jpg"
with Image.open(filename) as img_bg:
    img_bg.load()

img_bg.paste(
    img_fka.resize((img_fka.width // 4, img_fka.height // 4)),
    (1200, 150),
    fka_mask.resize((fka_mask.width // 4, fka_mask.height // 4)),
)

img_bg

"""La idea es integrar a las cantantes dentro de la pintura como si formaran parte de la cena que esta siendo interrumpida por el visitante imprevisto

##Crear una marca de agua
"""

logo = "/content/drive/MyDrive/MCD/Procesamiento/sgc.jpg"
with Image.open(logo) as img_logo:
    img_logo.load()


img_logo = Image.open(logo)
img_logo

img_logo = img_logo.convert("L")
threshold = 50
img_logo = img_logo.point(lambda x: 255 if x > threshold else 0)
img_logo = img_logo.resize(
    (img_logo.width // 2, img_logo.height // 2)
)
img_logo = img_logo.filter(ImageFilter.CONTOUR)
img_logo

img_logo = img_logo.point(lambda x: 0 if x == 255 else 255)
img_logo

img_bg.paste(img_logo, (40, 1100), img_logo)
img_bg

"""A pesar de que la idea original de integrar a las cantautoras de forma casual en la pintura no será posible por las limitaciones con las que contamos con el código actual, de igual manera se pegarán las imagenes anteriormente trabajadas de Lana del Rey con la intención de en etapas siguientes se pueda pulir esta imagen."""

img_bg.paste(
    img_ldr.resize((img_ldr.width // 2, img_ldr.height // 2)),
    (270, 100),
    ldr_mask.resize((ldr_mask.width //2, ldr_mask.height // 2)),
)

img_bg